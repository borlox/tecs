// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/02/ALU.hdl

/**
 * The ALU.  Computes a pre-defined set of functions out = f(x,y)
 * where x and y are two 16-bit inputs. The function f is selected 
 * by a set of 6 control bits denoted zx, nx, zy, ny, f, no.
 * The ALU operation can be described using the following pseudocode:
 *     if zx=1 set x = 0       // 16-bit zero constant
 *     if nx=1 set x = !x      // Bit-wise negation
 *     if zy=1 set y = 0       // 16-bit zero constant
 *     if ny=1 set y = !y      // Bit-wise negation
 *     if f=1  set out = x + y // Integer 2's complement addition
 *     else    set out = x & y // Bit-wise And
 *     if no=1 set out = !out  // Bit-wise negation
 *
 * In addition to computing out, the ALU computes two 1-bit outputs:
 *     if out=0 set zr = 1 else zr = 0 // 16-bit equality comparison
 *     if out<0 set ng = 1 else ng = 0 // 2's complement comparison
 */

CHIP ALU {

    IN  // 16-bit inputs:
        x[16], y[16],
        // Control bits:
        zx, // Zero the x input
        nx, // Negate the x input
        zy, // Zero the y input
        ny, // Negate the y input
        f,  // Function code: 1 for add, 0 for and
        no; // Negate the out output

    OUT // 16-bit output
        out[16],

        // ALU output flags
        zr, // 1 if out=0, 0 otherwise
        ng; // 1 if out<0, 0 otherwise

    PARTS:
    // Implementation missing.
    
    // if zx = 1 then x_zeroed = 0 else x_zeroed = x end
    Mux16(a = x, b = false, sel = zx, out = xZeroed);
    Mux16(a = y, b = false, sel = zy, out = yZeroed);
    
    Not16(in = xZeroed, out = notXzeroed);
    Not16(in = yZeroed, out = notYzeroed);
    
    // if nx = 1 then the_x = not_x_zeroed else the_x = x_zeroed end
    Mux16(a = xZeroed, b = notXzeroed, sel = nx, out = theX);
    Mux16(a = yZeroed, b = notYzeroed, sel = ny, out = theY);
    
    Add16(a = theX, b = theY, out = xPlusY);
    And16(a = theX, b = theY, out = xAndY);
    
    // if f = 1 then pre_out = x_plus_y else pre_out = x_and_y end
    Mux16(a = xAndY, b = xPlusY, sel = f, out = preOut);
    Not16(in = preOut, out = notOut);
    
    // if no = 1 then out = not_out else out = pre_out end
    Mux16(a = preOut, b = notOut, sel = no, out = theOut);
    
    SelHi(in = theOut, out = ng);
    
	  Or16Way(in = theOut, out = nzr);
    Not(in = nzr, out = zr);

    // out = the_out
    And16(a = theOut, b = theOut, out = out);    
}
